/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Image;
import org.openapitools.model.Race;
import org.openapitools.model.Score;
import org.openapitools.model.User;
import org.openapitools.model.UserGroup;
import org.openapitools.model.Waypoint;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-05T08:27:26.479061100+02:00[Europe/Budapest]")
@Validated
@Tag(name = "UserGroup", description = "the UserGroup API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/group/{groupId}/{id} : Add a user to the user group
     *
     * @param id ID of the User to add (required)
     * @param groupId ID of the Group to add the user to (required)
     * @return User added (status code 200)
     */
    @Operation(
        operationId = "addUserToUserGroup",
        summary = "Add a user to the user group",
        tags = { "UserGroup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User added")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/group/{groupId}/{id}"
    )
    default ResponseEntity<Void> addUserToUserGroup(
        @Parameter(name = "id", description = "ID of the User to add", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "groupId", description = "ID of the Group to add the user to", required = true, in = ParameterIn.PATH) @PathVariable("groupId") Integer groupId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/images : Get a list of images
     * Returns a list of images in the database
     *
     * @return A list of images (status code 200)
     */
    @Operation(
        operationId = "apiImagesGet",
        summary = "Get a list of images",
        description = "Returns a list of images in the database",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of images", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Image.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/images",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Image>> apiImagesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/images/{id} : Delete an image by ID
     * Deletes an image with the specified ID
     *
     * @param id The ID of the image to delete (required)
     * @return Image deleted (status code 204)
     *         or Image not found (status code 404)
     */
    @Operation(
        operationId = "apiImagesIdDelete",
        summary = "Delete an image by ID",
        description = "Deletes an image with the specified ID",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Image deleted"),
            @ApiResponse(responseCode = "404", description = "Image not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/images/{id}"
    )
    default ResponseEntity<Void> apiImagesIdDelete(
        @Parameter(name = "id", description = "The ID of the image to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/images/{id} : Get an image by ID
     * Returns an image with the specified ID
     *
     * @param id The ID of the image to retrieve (required)
     * @return The requested image (status code 200)
     *         or Image not found (status code 404)
     */
    @Operation(
        operationId = "apiImagesIdGet",
        summary = "Get an image by ID",
        description = "Returns an image with the specified ID",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The requested image", content = {
                @Content(mediaType = "application / json", schema = @Schema(implementation = Image.class))
            }),
            @ApiResponse(responseCode = "404", description = "Image not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/images/{id}",
        produces = { "application / json" }
    )
    default ResponseEntity<Image> apiImagesIdGet(
        @Parameter(name = "id", description = "The ID of the image to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application / json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application / json";
                    ApiUtil.setExampleResponse(request, "application / json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/images/{id} : Update an image by ID
     * Updates an image with the specified ID
     *
     * @param id The ID of the image to update (required)
     * @param image  (required)
     * @return The updated image (status code 200)
     *         or Image not found (status code 404)
     */
    @Operation(
        operationId = "apiImagesIdPut",
        summary = "Update an image by ID",
        description = "Updates an image with the specified ID",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated image", content = {
                @Content(mediaType = "application / json", schema = @Schema(implementation = Image.class))
            }),
            @ApiResponse(responseCode = "404", description = "Image not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/images/{id}",
        produces = { "application / json" },
        consumes = { "application / json" }
    )
    default ResponseEntity<Image> apiImagesIdPut(
        @Parameter(name = "id", description = "The ID of the image to update", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Image", description = "", required = true) @Valid @RequestBody Image image
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application / json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application / json";
                    ApiUtil.setExampleResponse(request, "application / json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/images : Upload a new image
     * Uploads a new image to the database
     *
     * @param body  (required)
     * @return The uploaded image (status code 201)
     */
    @Operation(
        operationId = "apiImagesPost",
        summary = "Upload a new image",
        description = "Uploads a new image to the database",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The uploaded image", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Image.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/images",
        produces = { "application/json" },
        consumes = { "image/jpeg", "image/png" }
    )
    default ResponseEntity<Image> apiImagesPost(
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody org.springframework.core.io.Resource body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/race : Create a new Race.
     *
     * @param race Race object to create. (required)
     * @return Race created (status code 201)
     */
    @Operation(
        operationId = "createRace",
        summary = "Create a new Race.",
        tags = { "Race" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Race created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Race.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/race",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Race> createRace(
        @Parameter(name = "Race", description = "Race object to create.", required = true) @Valid @RequestBody Race race
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Waypoints\" : [ { \"latitiude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 }, { \"latitiude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 } ], \"teams\" : [ { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" } ], \"eventImages\" : [ { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" } ], \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/score : Create a new Score.
     *
     * @param score Score object to create. (required)
     * @return Score created (status code 201)
     */
    @Operation(
        operationId = "createScore",
        summary = "Create a new Score.",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Score created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Score.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/score",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Score> createScore(
        @Parameter(name = "Score", description = "Score object to create.", required = true) @Valid @RequestBody Score score
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/user : Create a new User.
     *
     * @param user User object to create. (required)
     * @return User created (status code 201)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create a new User.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> createUser(
        @Parameter(name = "User", description = "User object to create.", required = true) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/group : Create a new UserGroup.
     *
     * @param userGroup UserGroup object to create. (required)
     * @return UserGroup created (status code 201)
     */
    @Operation(
        operationId = "createUserGroup",
        summary = "Create a new UserGroup.",
        tags = { "UserGroup" },
        responses = {
            @ApiResponse(responseCode = "201", description = "UserGroup created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserGroup.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/group",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserGroup> createUserGroup(
        @Parameter(name = "UserGroup", description = "UserGroup object to create.", required = true) @Valid @RequestBody UserGroup userGroup
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/race/{id} : Delete a Race by ID.
     *
     * @param id ID of the Race to retrieve, update or delete. (required)
     * @return Race deleted (status code 204)
     *         or Race not found (status code 404)
     */
    @Operation(
        operationId = "deleteRaceById",
        summary = "Delete a Race by ID.",
        tags = { "Race" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Race deleted"),
            @ApiResponse(responseCode = "404", description = "Race not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/race/{id}"
    )
    default ResponseEntity<Void> deleteRaceById(
        @Parameter(name = "id", description = "ID of the Race to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/score/{id} : Delete a Score by ID.
     *
     * @param id ID of the Score to retrieve, update or delete. (required)
     * @return Score deleted (status code 204)
     *         or Score not found (status code 404)
     */
    @Operation(
        operationId = "deleteScoreById",
        summary = "Delete a Score by ID.",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Score deleted"),
            @ApiResponse(responseCode = "404", description = "Score not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/score/{id}"
    )
    default ResponseEntity<Void> deleteScoreById(
        @Parameter(name = "id", description = "ID of the Score to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/user/{id} : Delete a User by ID.
     *
     * @param id ID of the User to retrieve, update or delete. (required)
     * @return User deleted (status code 204)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "deleteUserById",
        summary = "Delete a User by ID.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "204", description = "User deleted"),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/user/{id}"
    )
    default ResponseEntity<Void> deleteUserById(
        @Parameter(name = "id", description = "ID of the User to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/group/{id} : Delete a UserGroup by ID.
     *
     * @param id ID of the UserGroup to retrieve, update or delete. (required)
     * @return UserGroup deleted (status code 204)
     *         or UserGroup not found (status code 404)
     */
    @Operation(
        operationId = "deleteUserGroupById",
        summary = "Delete a UserGroup by ID.",
        tags = { "UserGroup" },
        responses = {
            @ApiResponse(responseCode = "204", description = "UserGroup deleted"),
            @ApiResponse(responseCode = "404", description = "UserGroup not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/group/{id}"
    )
    default ResponseEntity<Void> deleteUserGroupById(
        @Parameter(name = "id", description = "ID of the UserGroup to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/group/race/{id} : Gets all the groups in the given race
     *
     * @param id ID of the associated race (required)
     * @return UserGroup created (status code 200)
     */
    @Operation(
        operationId = "getAllGroupsInARace",
        summary = "Gets all the groups in the given race",
        tags = { "UserGroup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "UserGroup created", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserGroup.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/group/race/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserGroup>> getAllGroupsInARace(
        @Parameter(name = "id", description = "ID of the associated race", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/race : Get all Races.
     *
     * @return List of Race objects (status code 200)
     */
    @Operation(
        operationId = "getAllRaces",
        summary = "Get all Races.",
        tags = { "Race" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Race objects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Race.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/race",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Race>> getAllRaces(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Waypoints\" : [ { \"latitiude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 }, { \"latitiude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 } ], \"teams\" : [ { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" } ], \"eventImages\" : [ { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" } ], \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"Waypoints\" : [ { \"latitiude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 }, { \"latitiude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 } ], \"teams\" : [ { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" } ], \"eventImages\" : [ { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" } ], \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/score : Get all Scores.
     *
     * @return List of Score objects (status code 200)
     */
    @Operation(
        operationId = "getAllScores",
        summary = "Get all Scores.",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Score objects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Score.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/score",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Score>> getAllScores(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/score/race/{id} : Get all Scores of a race.
     *
     * @param id Id of the race to retrive scores for. (required)
     * @return List of Score objects in a race (status code 200)
     */
    @Operation(
        operationId = "getAllScoresOfRace",
        summary = "Get all Scores of a race.",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Score objects in a race", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Score.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/score/race/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Score>> getAllScoresOfRace(
        @Parameter(name = "id", description = "Id of the race to retrive scores for.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/group : Get all UserGroups.
     *
     * @return List of UserGroup objects (status code 200)
     */
    @Operation(
        operationId = "getAllUserGroups",
        summary = "Get all UserGroups.",
        tags = { "UserGroup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of UserGroup objects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserGroup.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/group",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserGroup>> getAllUserGroups(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/user : Get all Users.
     *
     * @return List of User objects (status code 200)
     */
    @Operation(
        operationId = "getAllUsers",
        summary = "Get all Users.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of User objects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> getAllUsers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/image/race/{id} : Get all Scores of a race.
     *
     * @param id Id Of the reace to get images of (required)
     * @return List of Score objects in a race (status code 200)
     */
    @Operation(
        operationId = "getImagesOfRace",
        summary = "Get all Scores of a race.",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Score objects in a race", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Image.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/image/race/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Image>> getImagesOfRace(
        @Parameter(name = "id", description = "Id Of the reace to get images of", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/race/{id} : Get a Race by ID.
     *
     * @param id ID of the Race to retrieve, update or delete. (required)
     * @return Race object (status code 200)
     *         or Race not found (status code 404)
     */
    @Operation(
        operationId = "getRaceById",
        summary = "Get a Race by ID.",
        tags = { "Race" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Race object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Race.class))
            }),
            @ApiResponse(responseCode = "404", description = "Race not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/race/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Race> getRaceById(
        @Parameter(name = "id", description = "ID of the Race to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Waypoints\" : [ { \"latitiude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 }, { \"latitiude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 } ], \"teams\" : [ { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" } ], \"eventImages\" : [ { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" } ], \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/score/{id} : Get a Score by ID.
     *
     * @param id ID of the Score to retrieve, update or delete. (required)
     * @return Score object (status code 200)
     *         or Score not found (status code 404)
     */
    @Operation(
        operationId = "getScoreById",
        summary = "Get a Score by ID.",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Score object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Score.class))
            }),
            @ApiResponse(responseCode = "404", description = "Score not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/score/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Score> getScoreById(
        @Parameter(name = "id", description = "ID of the Score to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/score/group/{id} : Get score of a group
     *
     * @param id Id of the group to retrive score for. (required)
     * @return List of Score objects (status code 200)
     */
    @Operation(
        operationId = "getScoreOfGroup",
        summary = "Get score of a group",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Score objects", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Score.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/score/group/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Score> getScoreOfGroup(
        @Parameter(name = "id", description = "Id of the group to retrive score for.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/user/{id} : Get a User by ID.
     *
     * @param id ID of the User to retrieve, update or delete. (required)
     * @return User object (status code 200)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Get a User by ID.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUserById(
        @Parameter(name = "id", description = "ID of the User to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/group/{id} : Get a UserGroup by ID.
     *
     * @param id ID of the UserGroup to retrieve, update or delete. (required)
     * @return UserGroup object (status code 200)
     *         or UserGroup not found (status code 404)
     */
    @Operation(
        operationId = "getUserGroupById",
        summary = "Get a UserGroup by ID.",
        tags = { "UserGroup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "UserGroup object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserGroup.class))
            }),
            @ApiResponse(responseCode = "404", description = "UserGroup not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/group/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserGroup> getUserGroupById(
        @Parameter(name = "id", description = "ID of the UserGroup to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/group/{groupId}/{id} : Remove user from group
     *
     * @param id ID of the User to add (required)
     * @param groupId ID of the Group to add the user to (required)
     * @return User removed (status code 204)
     */
    @Operation(
        operationId = "removeUserFromGroup",
        summary = "Remove user from group",
        tags = { "UserGroup" },
        responses = {
            @ApiResponse(responseCode = "204", description = "User removed")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/group/{groupId}/{id}"
    )
    default ResponseEntity<Void> removeUserFromGroup(
        @Parameter(name = "id", description = "ID of the User to add", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "groupId", description = "ID of the Group to add the user to", required = true, in = ParameterIn.PATH) @PathVariable("groupId") Integer groupId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/race/{id} : Upsert a Race by ID.
     *
     * @param id ID of the Race to retrieve, update or delete. (required)
     * @param race Race object to upsert. (required)
     * @return Race object (status code 200)
     *         or Race created (status code 201)
     *         or Race not found (status code 404)
     */
    @Operation(
        operationId = "upsertRaceById",
        summary = "Upsert a Race by ID.",
        tags = { "Race" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Race object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Race.class))
            }),
            @ApiResponse(responseCode = "201", description = "Race created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Race.class))
            }),
            @ApiResponse(responseCode = "404", description = "Race not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/race/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Race> upsertRaceById(
        @Parameter(name = "id", description = "ID of the Race to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Race", description = "Race object to upsert.", required = true) @Valid @RequestBody Race race
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Waypoints\" : [ { \"latitiude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 }, { \"latitiude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 } ], \"teams\" : [ { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" } ], \"eventImages\" : [ { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" } ], \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/score/{id} : Upsert a Score by ID.
     *
     * @param id ID of the Score to retrieve, update or delete. (required)
     * @param score Score object to upsert. (required)
     * @return Score object (status code 200)
     *         or Score created (status code 201)
     *         or Score not found (status code 404)
     */
    @Operation(
        operationId = "upsertScoreById",
        summary = "Upsert a Score by ID.",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Score object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Score.class))
            }),
            @ApiResponse(responseCode = "201", description = "Score created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Score.class))
            }),
            @ApiResponse(responseCode = "404", description = "Score not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/score/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Score> upsertScoreById(
        @Parameter(name = "id", description = "ID of the Score to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Score", description = "Score object to upsert.", required = true) @Valid @RequestBody Score score
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/user/{id} : Upsert a User by ID.
     *
     * @param id ID of the User to retrieve, update or delete. (required)
     * @param user User object to upsert. (required)
     * @return User object (status code 200)
     *         or User created (status code 201)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "upsertUserById",
        summary = "Upsert a User by ID.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "201", description = "User created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/user/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> upsertUserById(
        @Parameter(name = "id", description = "ID of the User to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "User", description = "User object to upsert.", required = true) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/group/{id} : Upsert a UserGroup by ID.
     *
     * @param id ID of the UserGroup to retrieve, update or delete. (required)
     * @param userGroup UserGroup object to upsert. (required)
     * @return UserGroup object (status code 200)
     *         or UserGroup created (status code 201)
     *         or UserGroup not found (status code 404)
     */
    @Operation(
        operationId = "upsertUserGroupById",
        summary = "Upsert a UserGroup by ID.",
        tags = { "UserGroup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "UserGroup object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserGroup.class))
            }),
            @ApiResponse(responseCode = "201", description = "UserGroup created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserGroup.class))
            }),
            @ApiResponse(responseCode = "404", description = "UserGroup not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/group/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserGroup> upsertUserGroupById(
        @Parameter(name = "id", description = "ID of the UserGroup to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UserGroup", description = "UserGroup object to upsert.", required = true) @Valid @RequestBody UserGroup userGroup
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"score\" : { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, \"groupName\" : \"The Avangers\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"users\" : [ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ], \"leaderId\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/score/group/{id} : The given group reached a new waypoint
     *
     * @param id Id of the group (required)
     * @param waypoint Waypoint object to complete. (required)
     * @return Result of the operation (status code 200)
     */
    @Operation(
        operationId = "waypointReached",
        summary = "The given group reached a new waypoint",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Result of the operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/score/group/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> waypointReached(
        @Parameter(name = "id", description = "Id of the group", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Waypoint", description = "Waypoint object to complete.", required = true) @Valid @RequestBody Waypoint waypoint
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
