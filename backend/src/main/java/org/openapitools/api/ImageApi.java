/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Image;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-05T07:53:28.767320600+02:00[Europe/Budapest]")
@Validated
@Tag(name = "Image", description = "the Image API")
public interface ImageApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /image/race/{id} : Get all Scores of a race.
     *
     * @param id Id Of the reace to get images of (required)
     * @return List of Score objects in a race (status code 200)
     */
    @Operation(
        operationId = "getImagesOfRace",
        summary = "Get all Scores of a race.",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Score objects in a race", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Image.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/image/race/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Image>> getImagesOfRace(
        @Parameter(name = "id", description = "Id Of the reace to get images of", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
