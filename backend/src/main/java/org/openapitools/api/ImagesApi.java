/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Image;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-05T07:53:28.767320600+02:00[Europe/Budapest]")
@Validated
@Tag(name = "Image", description = "the Image API")
public interface ImagesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /images : Get a list of images
     * Returns a list of images in the database
     *
     * @return A list of images (status code 200)
     */
    @Operation(
        operationId = "imagesGet",
        summary = "Get a list of images",
        description = "Returns a list of images in the database",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of images", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Image.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/images",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Image>> imagesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /images/{id} : Delete an image by ID
     * Deletes an image with the specified ID
     *
     * @param id The ID of the image to delete (required)
     * @return Image deleted (status code 204)
     *         or Image not found (status code 404)
     */
    @Operation(
        operationId = "imagesIdDelete",
        summary = "Delete an image by ID",
        description = "Deletes an image with the specified ID",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Image deleted"),
            @ApiResponse(responseCode = "404", description = "Image not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/images/{id}"
    )
    default ResponseEntity<Void> imagesIdDelete(
        @Parameter(name = "id", description = "The ID of the image to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /images/{id} : Get an image by ID
     * Returns an image with the specified ID
     *
     * @param id The ID of the image to retrieve (required)
     * @return The requested image (status code 200)
     *         or Image not found (status code 404)
     */
    @Operation(
        operationId = "imagesIdGet",
        summary = "Get an image by ID",
        description = "Returns an image with the specified ID",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The requested image", content = {
                @Content(mediaType = "application / json", schema = @Schema(implementation = Image.class))
            }),
            @ApiResponse(responseCode = "404", description = "Image not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/images/{id}",
        produces = { "application / json" }
    )
    default ResponseEntity<Image> imagesIdGet(
        @Parameter(name = "id", description = "The ID of the image to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application / json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application / json";
                    ApiUtil.setExampleResponse(request, "application / json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /images/{id} : Update an image by ID
     * Updates an image with the specified ID
     *
     * @param id The ID of the image to update (required)
     * @param image  (required)
     * @return The updated image (status code 200)
     *         or Image not found (status code 404)
     */
    @Operation(
        operationId = "imagesIdPut",
        summary = "Update an image by ID",
        description = "Updates an image with the specified ID",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated image", content = {
                @Content(mediaType = "application / json", schema = @Schema(implementation = Image.class))
            }),
            @ApiResponse(responseCode = "404", description = "Image not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/images/{id}",
        produces = { "application / json" },
        consumes = { "application / json" }
    )
    default ResponseEntity<Image> imagesIdPut(
        @Parameter(name = "id", description = "The ID of the image to update", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Image", description = "", required = true) @Valid @RequestBody Image image
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application / json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application / json";
                    ApiUtil.setExampleResponse(request, "application / json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /images : Upload a new image
     * Uploads a new image to the database
     *
     * @param body  (required)
     * @return The uploaded image (status code 201)
     */
    @Operation(
        operationId = "imagesPost",
        summary = "Upload a new image",
        description = "Uploads a new image to the database",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The uploaded image", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Image.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/images",
        produces = { "application/json" },
        consumes = { "image/jpeg", "image/png" }
    )
    default ResponseEntity<Image> imagesPost(
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody org.springframework.core.io.Resource body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
