/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Score;
import org.openapitools.model.Waypoint;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-05T07:53:28.767320600+02:00[Europe/Budapest]")
@Validated
@Tag(name = "Score", description = "the Score API")
public interface ScoreApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /score : Create a new Score.
     *
     * @param score Score object to create. (required)
     * @return Score created (status code 201)
     */
    @Operation(
        operationId = "createScore",
        summary = "Create a new Score.",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Score created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Score.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/score",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Score> createScore(
        @Parameter(name = "Score", description = "Score object to create.", required = true) @Valid @RequestBody Score score
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /score/{id} : Delete a Score by ID.
     *
     * @param id ID of the Score to retrieve, update or delete. (required)
     * @return Score deleted (status code 204)
     *         or Score not found (status code 404)
     */
    @Operation(
        operationId = "deleteScoreById",
        summary = "Delete a Score by ID.",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Score deleted"),
            @ApiResponse(responseCode = "404", description = "Score not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/score/{id}"
    )
    default ResponseEntity<Void> deleteScoreById(
        @Parameter(name = "id", description = "ID of the Score to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /score : Get all Scores.
     *
     * @return List of Score objects (status code 200)
     */
    @Operation(
        operationId = "getAllScores",
        summary = "Get all Scores.",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Score objects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Score.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/score",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Score>> getAllScores(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /score/race/{id} : Get all Scores of a race.
     *
     * @param id Id of the race to retrive scores for. (required)
     * @return List of Score objects in a race (status code 200)
     */
    @Operation(
        operationId = "getAllScoresOfRace",
        summary = "Get all Scores of a race.",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Score objects in a race", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Score.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/score/race/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Score>> getAllScoresOfRace(
        @Parameter(name = "id", description = "Id of the race to retrive scores for.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }, { \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /score/{id} : Get a Score by ID.
     *
     * @param id ID of the Score to retrieve, update or delete. (required)
     * @return Score object (status code 200)
     *         or Score not found (status code 404)
     */
    @Operation(
        operationId = "getScoreById",
        summary = "Get a Score by ID.",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Score object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Score.class))
            }),
            @ApiResponse(responseCode = "404", description = "Score not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/score/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Score> getScoreById(
        @Parameter(name = "id", description = "ID of the Score to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /score/group/{id} : Get score of a group
     *
     * @param id Id of the group to retrive score for. (required)
     * @return List of Score objects (status code 200)
     */
    @Operation(
        operationId = "getScoreOfGroup",
        summary = "Get score of a group",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Score objects", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Score.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/score/group/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Score> getScoreOfGroup(
        @Parameter(name = "id", description = "Id of the group to retrive score for.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /score/{id} : Upsert a Score by ID.
     *
     * @param id ID of the Score to retrieve, update or delete. (required)
     * @param score Score object to upsert. (required)
     * @return Score object (status code 200)
     *         or Score created (status code 201)
     *         or Score not found (status code 404)
     */
    @Operation(
        operationId = "upsertScoreById",
        summary = "Upsert a Score by ID.",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Score object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Score.class))
            }),
            @ApiResponse(responseCode = "201", description = "Score created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Score.class))
            }),
            @ApiResponse(responseCode = "404", description = "Score not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/score/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Score> upsertScoreById(
        @Parameter(name = "id", description = "ID of the Score to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Score", description = "Score object to upsert.", required = true) @Valid @RequestBody Score score
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"raceId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"RoutePoints\" : [ null, null ], \"groupId\" : \"123e4567-e89b-12d3-a456-426614174000\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /score/group/{id} : The given group reached a new waypoint
     *
     * @param id Id of the group (required)
     * @param waypoint Waypoint object to complete. (required)
     * @return Result of the operation (status code 200)
     */
    @Operation(
        operationId = "waypointReached",
        summary = "The given group reached a new waypoint",
        tags = { "Score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Result of the operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/score/group/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> waypointReached(
        @Parameter(name = "id", description = "Id of the group", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Waypoint", description = "Waypoint object to complete.", required = true) @Valid @RequestBody Waypoint waypoint
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
