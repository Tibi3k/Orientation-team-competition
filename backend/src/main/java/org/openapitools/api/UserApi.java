/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-05T07:53:28.767320600+02:00[Europe/Budapest]")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user : Create a new User.
     *
     * @param user User object to create. (required)
     * @return User created (status code 201)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create a new User.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> createUser(
        @Parameter(name = "User", description = "User object to create.", required = true) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{id} : Delete a User by ID.
     *
     * @param id ID of the User to retrieve, update or delete. (required)
     * @return User deleted (status code 204)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "deleteUserById",
        summary = "Delete a User by ID.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "204", description = "User deleted"),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{id}"
    )
    default ResponseEntity<Void> deleteUserById(
        @Parameter(name = "id", description = "ID of the User to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user : Get all Users.
     *
     * @return List of User objects (status code 200)
     */
    @Operation(
        operationId = "getAllUsers",
        summary = "Get all Users.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of User objects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> getAllUsers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }, { \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{id} : Get a User by ID.
     *
     * @param id ID of the User to retrieve, update or delete. (required)
     * @return User object (status code 200)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Get a User by ID.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUserById(
        @Parameter(name = "id", description = "ID of the User to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{id} : Upsert a User by ID.
     *
     * @param id ID of the User to retrieve, update or delete. (required)
     * @param user User object to upsert. (required)
     * @return User object (status code 200)
     *         or User created (status code 201)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "upsertUserById",
        summary = "Upsert a User by ID.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "201", description = "User created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> upsertUserById(
        @Parameter(name = "id", description = "ID of the User to retrieve, update or delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "User", description = "User object to upsert.", required = true) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"John\", \"lastName\" : \"James\", \"profilePicture\" : { \"imagePath\" : \"imagePath\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"imageType\" : \"ProfilePicture\" }, \"password\" : \"12345\", \"phone\" : \"+36301234567\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\", \"email\" : \"john@email.com\", \"username\" : \"theUser\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
